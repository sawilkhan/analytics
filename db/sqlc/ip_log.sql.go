// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ip_log.sql

package db

import (
	"context"
	"database/sql"
)

const getIPLogByID = `-- name: GetIPLogByID :one
SELECT id, ip_address, country, region, city, latitude, longitude, user_agent, referrer, request_time FROM ip_logs WHERE id = $1
`

func (q *Queries) GetIPLogByID(ctx context.Context, id int32) (IpLog, error) {
	row := q.db.QueryRowContext(ctx, getIPLogByID, id)
	var i IpLog
	err := row.Scan(
		&i.ID,
		&i.IpAddress,
		&i.Country,
		&i.Region,
		&i.City,
		&i.Latitude,
		&i.Longitude,
		&i.UserAgent,
		&i.Referrer,
		&i.RequestTime,
	)
	return i, err
}

const insertIPLog = `-- name: InsertIPLog :one
INSERT INTO ip_logs (
    ip_address, country, region, city, latitude, longitude, user_agent, referrer, request_time
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, ip_address, country, region, city, latitude, longitude, user_agent, referrer, request_time
`

type InsertIPLogParams struct {
	IpAddress   string         `json:"ip_address"`
	Country     sql.NullString `json:"country"`
	Region      sql.NullString `json:"region"`
	City        sql.NullString `json:"city"`
	Latitude    sql.NullString `json:"latitude"`
	Longitude   sql.NullString `json:"longitude"`
	UserAgent   sql.NullString `json:"user_agent"`
	Referrer    sql.NullString `json:"referrer"`
	RequestTime sql.NullTime   `json:"request_time"`
}

// query/ip_log.sql
func (q *Queries) InsertIPLog(ctx context.Context, arg InsertIPLogParams) (IpLog, error) {
	row := q.db.QueryRowContext(ctx, insertIPLog,
		arg.IpAddress,
		arg.Country,
		arg.Region,
		arg.City,
		arg.Latitude,
		arg.Longitude,
		arg.UserAgent,
		arg.Referrer,
		arg.RequestTime,
	)
	var i IpLog
	err := row.Scan(
		&i.ID,
		&i.IpAddress,
		&i.Country,
		&i.Region,
		&i.City,
		&i.Latitude,
		&i.Longitude,
		&i.UserAgent,
		&i.Referrer,
		&i.RequestTime,
	)
	return i, err
}

const listIPLogs = `-- name: ListIPLogs :many
SELECT id, ip_address, country, region, city, latitude, longitude, user_agent, referrer, request_time FROM ip_logs LIMIT $1 OFFSET $2
`

type ListIPLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListIPLogs(ctx context.Context, arg ListIPLogsParams) ([]IpLog, error) {
	rows, err := q.db.QueryContext(ctx, listIPLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IpLog{}
	for rows.Next() {
		var i IpLog
		if err := rows.Scan(
			&i.ID,
			&i.IpAddress,
			&i.Country,
			&i.Region,
			&i.City,
			&i.Latitude,
			&i.Longitude,
			&i.UserAgent,
			&i.Referrer,
			&i.RequestTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
